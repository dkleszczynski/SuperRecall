<Window x:Class="SuperRecall.Views.ElementsView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:self="clr-namespace:SuperRecall.Views"
        xmlns:help="clr-namespace:SuperRecall.Helpers"
        xmlns:res="clr-namespace:SuperRecall.Resources"
        xmlns:model="clr-namespace:SuperRecall.Models"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:conv="clr-namespace:SuperRecall.Views.Converters"
        mc:Ignorable="d"
        Name="ElementsViewWindow"
        Title="Elements Manager" Height="1240" Width="860" WindowState="Maximized">
    <Grid>
        <StackPanel VerticalAlignment="Top" HorizontalAlignment="Right" Orientation="Horizontal" Margin="0 0 10 0">
            <ToggleButton VerticalAlignment="Top" Name="EditModeButton" Margin="5 " HorizontalAlignment="Right">
                <TextBlock FontSize="20" FontWeight="Bold" Text="{x:Static res:ElementsView.EditMode}"></TextBlock>
            </ToggleButton>
        </StackPanel>
        <TabControl Name="ElementsViewTab">
            <TabControl.Resources>
                <Style TargetType="TabItem">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="TabItem">
                                <Border Name="Panel" BorderThickness="1" BorderBrush="Black">
                                    <ContentPresenter x:Name="ContentSite"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center"
                                            ContentSource="Header"
                                            Margin="5"
                                            TextBlock.FontSize="20"
                                            TextBlock.FontWeight="Bold"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="Panel" Property="Background" Value="GreenYellow" />
                                    </Trigger>
                                    <Trigger Property="IsSelected" Value="False">
                                        <Setter TargetName="Panel" Property="Background" Value="White" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </TabControl.Resources>
            <TabItem Name="ListTabItem" Header="{x:Static res:ElementsView.List}">
                <Grid Margin="0,0,0,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto"></RowDefinition>
                        <RowDefinition Height="auto"></RowDefinition>
                        <RowDefinition Height="auto"></RowDefinition>
                        <RowDefinition Height="*"></RowDefinition>
                        <RowDefinition Height="auto"></RowDefinition>
                    </Grid.RowDefinitions>
                    <TextBox Name="SearchBox" Grid.Column="2" Text="{Binding SearchText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Stretch" Margin="20">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="TextChanged">
                                <i:InvokeCommandAction Command="{Binding SearchBoxTextChangedCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBox>
                    <WrapPanel Grid.Row="1" Grid.Column="2" HorizontalAlignment="Center" Margin="10">
                        <StackPanel Margin="10">
                            <TextBlock Margin="5" FontSize="19" FontWeight="Bold" Text="{x:Static res:ElementsView.Source}"/>
                            <ComboBox Name="SourceSelect" Margin="5" SelectedIndex="0" ItemsSource="{Binding SourceList}" SelectedValuePath="Key" DisplayMemberPath="Value" SelectedItem="{Binding SelectedSource}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="SelectionChanged">
                                        <i:InvokeCommandAction Command="{Binding  SourceSelectionChangedCommand}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </ComboBox>
                        </StackPanel>
                        <StackPanel Margin="10">
                            <TextBlock Margin="5" FontSize="19" FontWeight="Bold" Text="{x:Static res:ElementsView.Group}"/>
                            <ComboBox Name="GroupSelect" Margin="5" SelectedIndex="{Binding SelectedGroupIndex, Mode=TwoWay}" ItemsSource="{Binding GroupList}" SelectedItem="{Binding SelectedGroup}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="SelectionChanged">
                                        <i:InvokeCommandAction Command="{Binding  GroupSelectionChangedCommand}"/>
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="Loaded">
                                        <i:InvokeCommandAction Command="{Binding  GroupListLoadedCommand}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </ComboBox>
                        </StackPanel>
                        <StackPanel Margin="10">
                            <TextBlock Margin="5" FontSize="19" FontWeight="Bold" Text="{x:Static res:ElementsView.Selected}"/>
                            <CheckBox Name="SelectedCheck"  Margin="5 5 5 5" HorizontalAlignment="Center" IsChecked="{Binding SelectedCheckBoxIsChecked}" Command="{Binding SelectedCheckBoxClickCommand}">
                                <CheckBox.LayoutTransform>
                                    <ScaleTransform ScaleX="2" ScaleY="2" />
                                </CheckBox.LayoutTransform>
                            </CheckBox>
                        </StackPanel>
                    </WrapPanel>
                    <Button Grid.Row="2" HorizontalAlignment="Left" Margin="5" Command="{Binding PreviousPageCommand}" Content="{x:Static res:ElementsView.Previous}"/>
                    <TextBox Name="pageNumberText" Grid.Row="2" Grid.Column="2" HorizontalAlignment="Center" FontSize="18" FontWeight="Bold" Margin="5">
                        <TextBox.Text>
                            <MultiBinding StringFormat="{}{2} {0} / {1}">
                                <Binding Path="CurrentPage" />
                                <Binding Path="PageCount" />
                                <Binding Path="PageText"/>
                            </MultiBinding>
                        </TextBox.Text>
                    </TextBox>
                    <Button Grid.Row="2" Grid.Column="4" Grid.ColumnSpan="2" HorizontalAlignment="Right" Margin="5" Command="{Binding NextPageCommand}" Content="{x:Static res:ElementsView.Next}"/>
                    <DataGrid Name="ElementsGrid" ItemsSource="{Binding Elements}" Grid.Row="3" Grid.ColumnSpan="5" HorizontalAlignment="Stretch"  VerticalAlignment="Top" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False" IsReadOnly="True" Margin="5" SelectedItem="{Binding SelectedElement, Mode=TwoWay}">
                        <DataGrid.Resources>
                            <DataTemplate x:Key="QueueLearn" DataType="{x:Type model:QueueElement}">
                                <ToggleButton x:Name="LearningToggle" VerticalAlignment="Center" Height="auto" Width="80" Margin="2" IsChecked="{Binding IsSelected}" Command="{Binding ElementName=ElementsViewWindow, Path=DataContext.ElementSelectionClickCommand}">
                                    <ToggleButton.Content>
                                        <TextBlock Padding="0" Margin="0" Text="{x:Static res:ElementsView.InLearning}"/>
                                    </ToggleButton.Content>
                                 </ToggleButton>
                            </DataTemplate>
                            <DataTemplate x:Key="ReviseWatch" DataType="{x:Type model:ReviseElement}">
                                <ToggleButton x:Name="WatchingToggle" VerticalAlignment="Center" Height="auto" Width="80" Margin="2" IsChecked="{Binding IsSelected}" Command="{Binding ElementName=ElementsViewWindow, Path=DataContext.ElementSelectionClickCommand}">
                                    <ToggleButton.Content>
                                        <TextBlock Text="{x:Static res:ElementsView.Watched}"/>
                                    </ToggleButton.Content>
                                </ToggleButton>
                            </DataTemplate>
                            <DataTemplate x:Key="QueueProgress" DataType="{x:Type model:QueueElement}">
                                <ProgressBar Height="20"  Value="{Binding LearningProgress}" Margin="3 5 3 5">
                                    <ProgressBar.ToolTip>
                                        <ToolTip Content="{Binding LearningProgress}" ContentStringFormat="{} {0} %" />
                                    </ProgressBar.ToolTip>
                                    <ProgressBar.LayoutTransform>
                                        <RotateTransform Angle="-90" />
                                    </ProgressBar.LayoutTransform>
                                </ProgressBar>
                            </DataTemplate>
                            <DataTemplate x:Key="ReviseProgress" DataType="{x:Type model:ReviseElement}">
                                <Grid>
                                    <ProgressBar Height="20"  Value="100" Margin="3 5 3 5">
                                        <ProgressBar.LayoutTransform>
                                            <RotateTransform Angle="-90" />
                                        </ProgressBar.LayoutTransform>
                                    </ProgressBar>
                                    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding ReviewDates.Count}"></TextBlock>
                                    <Grid.ToolTip>
                                        <ToolTip>
                                            <ToolTip.Resources>
                                                <conv:ReviseCountConverter x:Key="reviseCountConverter"/>
                                            </ToolTip.Resources>
                                            <ToolTip.Content>
                                                <MultiBinding StringFormat="{}{0} {1}" Converter="{StaticResource reviseCountConverter}">
                                                    <Binding Source="{x:Static res:ElementsView.ReviseCount}"/>
                                                    <Binding Path="ReviewDates"/>
                                                </MultiBinding>
                                            </ToolTip.Content>
                                        </ToolTip>
                                    </Grid.ToolTip>
                                </Grid>
                            </DataTemplate>
                        </DataGrid.Resources>
                        <DataGrid.Columns>
                            <DataGridTemplateColumn Header="   " CanUserSort="True"  Width="auto" SortMemberPath="LearningProgress">
                                <DataGridTemplateColumn.CellTemplateSelector>
                                    <help:ElementsViewTemplateSelector QueueTemplate="{StaticResource QueueProgress}" RevisionTemplate="{StaticResource ReviseProgress}"/>
                                </DataGridTemplateColumn.CellTemplateSelector>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn x:Name="QuestionColumn" Header="{x:Static res:ElementsView.QuestionHeader}" Binding="{Binding Question}" SortMemberPath="Question" Width="*" CanUserSort="True"/>
                            <DataGridTextColumn  Header="{x:Static res:ElementsView.AnswerHeader}" Binding="{Binding Answer}" SortMemberPath="Answer" Width="*" CanUserSort="True"/>
                            <DataGridTextColumn Header="{x:Static res:ElementsView.GroupHeader}" Binding="{Binding Group}" SortMemberPath="Group" Width="*" CanUserSort="True"/>
                            <DataGridTemplateColumn Header="{x:Static res:ElementsView.StateHeader}"  Width="auto">
                                <DataGridTemplateColumn.HeaderStyle>
                                    <Style TargetType="{x:Type DataGridColumnHeader}">
                                        <Setter Property="HorizontalContentAlignment" Value="Center" />
                                    </Style>
                                </DataGridTemplateColumn.HeaderStyle>
                                <DataGridTemplateColumn.CellTemplateSelector>
                                    <help:ElementsViewTemplateSelector QueueTemplate="{StaticResource QueueLearn}" RevisionTemplate="{StaticResource ReviseWatch}"/>
                                </DataGridTemplateColumn.CellTemplateSelector>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Width="auto">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5">
                                            <Button Margin="5" Width="auto" Height="30" Content="A"/>
                                            <Button Name="OptionsBtn" Margin="5" Width="auto" Height="30" Content="{x:Static res:ElementsView.Options}" Command="{Binding ElementName=ElementsViewWindow, Path=DataContext.ShowOptionsMenuCommand}" CommandParameter="{Binding ElementName=root, Path=(FocusManager.FocusedElement)}"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                  <Button Grid.Row="4" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="5" Content="Back"/>
                </Grid>
            </TabItem>
            <TabItem Header="{x:Static res:ElementsView.Details}">
            </TabItem>
        </TabControl>
    </Grid>
</Window>
